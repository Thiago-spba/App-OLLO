rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- FUN√á√ïES HELPER (Otimizadas) ---
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    function isAuthenticated() {
      return request.auth != null;
    }

    // --- REGRAS GLOBAIS ---
    // Nega todas as leituras e escritas por padr√£o. Acesso s√≥ √© concedido
    // pelas regras espec√≠ficas abaixo. Esta √© a pr√°tica de seguran√ßa mais importante.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- REGRAS POR COLE√á√ÉO ---

    // üë§ Cole√ß√£o 'users' (DADOS PRIVADOS E SENS√çVEIS)
    match /users/{userId} {
      // Apenas o pr√≥prio usu√°rio ou um admin pode ler/escrever seus dados privados.
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // üì¢ Cole√ß√£o 'users_public' (DADOS P√öBLICOS DE PERFIL)
    match /users_public/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin(); // Valida√ß√£o mais granular pode ser adicionada aqui

      // üñºÔ∏è Subcole√ß√£o 'media' de um usu√°rio
      match /media/{mediaId} {
        allow read: if resource.data.privacy == 'public' || isOwner(userId) || isAdmin();
        allow create: if isOwner(userId)
                      && request.resource.data.userId == userId
                      && request.resource.data.createdAt == request.time
                      && request.resource.data.url is string
                      && request.resource.data.type is string
                      && request.resource.data.privacy in ['public', 'private'];
        allow update: if isOwner(userId) || isAdmin()
                      // Garante que campos imut√°veis n√£o sejam alterados
                      && request.resource.data.userId == resource.data.userId
                      && request.resource.data.createdAt == resource.data.createdAt
                      && request.resource.data.url == resource.data.url
                      && request.resource.data.type == resource.data.type
                      // Apenas a privacidade pode ser alterada
                      && request.resource.data.keys().hasOnly(['userId', 'createdAt', 'url', 'type', 'privacy', 'caption']);
        allow delete: if isOwner(userId) || isAdmin();
      }
    }
    
    // ‚úçÔ∏è Cole√ß√£o 'posts'
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.authorId)
                      // Valida√ß√£o de Schema: garante que o post tenha os campos necess√°rios e corretos
                      && request.resource.data.content is string
                      && request.resource.data.createdAt == request.time
                      && request.resource.data.likes == 0
                      && request.resource.data.commentsCount == 0
                      && request.resource.data.keys().hasAll(['authorId', 'content', 'createdAt', 'likes', 'commentsCount', 'media']);
      allow update: if isOwner(resource.data.authorId) || isAdmin()
                      // Permite alterar apenas o conte√∫do do post
                      && request.resource.data.content is string
                      && request.resource.data.keys().hasOnly(['content']);
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // üí¨ Subcole√ß√£o 'comments' dentro de posts
      match /comments/{commentId} {
        function isPostOwner() {
          return get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid;
        }

        allow read: if isAuthenticated();
        allow create: if isOwner(request.resource.data.authorId)
                      && request.resource.data.content is string
                      && request.resource.data.createdAt == request.time;
        allow update: if isOwner(resource.data.authorId)
                      && request.resource.data.content is string
                      && request.resource.data.keys().hasOnly(['content']); // S√≥ pode editar o conte√∫do
        allow delete: if isOwner(resource.data.authorId) || isAdmin() || isPostOwner(); // Dono do post tamb√©m pode deletar
      }

      // üíï Subcole√ß√£o 'likes' dentro de posts
      match /likes/{userId} {
        allow read: if isAuthenticated();
        // O ID do documento de like deve ser o UID do usu√°rio
        allow create: if isOwner(userId) && request.resource.data.size() == 0; // Documento de like deve ser vazio
        allow delete: if isOwner(userId);
      }
    }

    // üõí Cole√ß√£o 'listagens' (Marketplace) - Nome ajustado conforme seu c√≥digo
    match /listagens/{listingId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.sellerId)
                      && request.resource.data.title is string && request.resource.data.title.size() > 0
                      && request.resource.data.price is number && request.resource.data.price > 0
                      && request.resource.data.createdAt == request.time;
      allow update: if isOwner(resource.data.sellerId)
                      // Garante que o vendedor e a data de cria√ß√£o n√£o mudem
                      && request.resource.data.sellerId == resource.data.sellerId
                      && request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isOwner(resource.data.sellerId);
    }

    // üë• Cole√ß√£o 'admins'
    match /admins/{adminId} {
      // CORRE√á√ÉO CR√çTICA: Qualquer usu√°rio autenticado pode ler a lista de admins.
      // A regra antiga (if isAdmin()) criava uma depend√™ncia circular.
      allow read: if isAuthenticated();
      // Ningu√©m pode escrever do lado do cliente.
      allow write: if false;
    }
  }
}