// ARQUIVO CORRIGIDO E DEFINITIVO: firestore.rules

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- FUN√á√ïES HELPER ---
    // ARQUITETURA: Fun√ß√µes reutiliz√°veis para manter as regras limpas (DRY principle).

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // MUDAN√áA: Nova fun√ß√£o de valida√ß√£o para o campo 'privacy'.
    // ARQUITETURA: Centraliza a l√≥gica de quais valores de privacidade s√£o permitidos.
    // Se no futuro adicionarmos 'followers-only', s√≥ precisamos mudar aqui.
    function isValidPrivacy(privacy) {
      return privacy in ['public', 'private'];
    }

    // Regra especial para ambiente de desenvolvimento com emuladores
    match /{document=**} {
      allow read, write: if request.auth != null;
    }

    // --- REGRAS POR COLE√á√ÉO ---

    // üë§ Cole√ß√£o 'users' (DADOS PRIVADOS E SENS√çVEIS)
    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // üì¢ Cole√ß√£o 'users_public' (DADOS P√öBLICOS DE PERFIL)
    match /users_public/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) || isAdmin();
    }

    // üñºÔ∏è Subcole√ß√£o 'media' de um usu√°rio
    match /users/{userId}/media/{mediaId} {
      // Leitura continua a mesma: permitida se for p√∫blico, se for o dono ou admin.
      allow read: if resource.data.privacy == 'public' || isOwner(userId) || isAdmin();
      
      // Criar e deletar continua com a mesma permiss√£o.
      allow create, delete: if isOwner(userId) || isAdmin();

      // CORRE√á√ÉO: 'update' foi separado para ter sua pr√≥pria l√≥gica de valida√ß√£o.
      // ARQUITETURA: Agora verificamos n√£o apenas QUEM pode atualizar, mas O QUE pode ser atualizado.
      allow update: if (isOwner(userId) || isAdmin())
                    && isValidPrivacy(request.resource.data.privacy) // O novo valor de 'privacy' deve ser v√°lido.
                    && request.resource.data.ownerId == resource.data.ownerId // O 'ownerId' n√£o pode ser alterado.
                    && request.resource.data.createdAt == resource.data.createdAt; // A data de cria√ß√£o √© imut√°vel.
    }
    
    // ‚úçÔ∏è Cole√ß√£o 'posts'
    match /posts/{postId} {
      allow read: if true;
      allow create: if (request.auth != null && request.resource.data.authorId == request.auth.uid) || isAdmin();
      allow update, delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();
    }

    // Cole√ß√£o 'marketplace' (para an√∫ncios)
    match /marketplace/{itemId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.sellerId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.sellerId == request.auth.uid;
    }
  }
}