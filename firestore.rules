rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- FUNÇÕES HELPER (Segurança Otimizada) ---
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    // Cloud Functions do Firebase Admin SDK não têm token de auth
    function isCloudFunction() {
      return request.auth == null || 
             (request.auth.token != null && request.auth.token.admin == true);
    }
    
    function isSystemOperation() {
      return request.auth == null || // Admin SDK
             (request.auth.token != null && request.auth.token.admin == true) || // Admin claim
             (request.auth.token != null && request.auth.token.system == true); // System claim
    }
    
    function isValidString(field, minLength, maxLength) {
      return field is string && field.size() >= minLength && field.size() <= maxLength;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('.*@.*\\..*');
    }

    // Função para validar tipos de mídia
    function isValidMediaType(mediaType) {
      return mediaType is string && (
        mediaType.matches('image/.*') || 
        mediaType.matches('video/.*')
      );
    }

    // --- REGRAS GLOBAIS DE SEGURANÇA ---
    // DENY BY DEFAULT: Máxima segurança
    match /{document=**} {
      allow read, write: if false;
    }

    // --- COLEÇÕES PRINCIPAIS ---

    // USUÁRIOS PRIVADOS (Dados sensíveis)
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isSystemOperation() || isOwner(userId);
      allow write: if isSystemOperation() || isOwner(userId) || isAdmin();
      
      allow update: if isSystemOperation() ||
                   ((isOwner(userId) || isAdmin()) &&
                   request.resource.data.keys().hasOnly(['email', 'displayName', 'photoURL', 'bio', 'settings', 'lastActive', 'emailVerified', 'updatedAt', 'username', 'createdAt']) &&
                   (!request.resource.data.keys().hasAny(['email']) || isValidEmail(request.resource.data.email)));
    }

    // PERFIS PÚBLICOS
    match /users_public/{userId} {
      allow read: if true; // Perfis públicos são... públicos!
      allow list: if isAuthenticated();
      
      allow create: if isSystemOperation() || 
                   isOwner(userId) ||
                   (isOwner(userId) &&
                   request.resource.data.keys().hasAll(['userId', 'createdAt']) &&
                   request.resource.data.userId == userId);
                   
      allow write: if isSystemOperation() || isOwner(userId) || isAdmin();
                   
      allow update: if isSystemOperation() ||
                   isAdmin() ||
                   (isOwner(userId) &&
                   (!request.resource.data.keys().hasAny(['userId']) || request.resource.data.userId == resource.data.userId) &&
                   (!request.resource.data.keys().hasAny(['createdAt']) || request.resource.data.createdAt == resource.data.createdAt));

      // MÍDIA DE USUÁRIO - REGRAS CORRIGIDAS
      match /media/{mediaId} {
        allow read: if resource.data.privacy == 'public' || isOwner(userId) || isAdmin();
        allow list: if isAuthenticated();
        
        // CORREÇÃO CRÍTICA: Regras mais flexíveis para upload
        allow create: if isOwner(userId) &&
                     request.resource.data.userId == userId &&
                     isValidString(request.resource.data.url, 10, 2000) &&
                     isValidMediaType(request.resource.data.type) && // Aceita image/* e video/*
                     request.resource.data.privacy in ['public', 'private'] &&
                     request.resource.data.size < 52428800; // 50MB em bytes
                     
        allow update: if isOwner(userId) &&
                     request.resource.data.userId == resource.data.userId &&
                     request.resource.data.url == resource.data.url &&
                     request.resource.data.type == resource.data.type &&
                     request.resource.data.privacy in ['public', 'private'];
                     
        allow delete: if isOwner(userId) || isAdmin();
      }
    }
    
    // POSTS
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      
      allow create: if isAuthenticated() &&
                   isOwner(request.resource.data.authorId) &&
                   isValidString(request.resource.data.content, 1, 2000) &&
                   request.resource.data.createdAt == request.time &&
                   request.resource.data.likes == 0 &&
                   request.resource.data.commentsCount == 0 &&
                   request.resource.data.keys().hasAll(['authorId', 'content', 'createdAt', 'likes', 'commentsCount']) &&
                   request.resource.data.keys().hasOnly(['authorId', 'content', 'createdAt', 'likes', 'commentsCount', 'media', 'location', 'tags']) &&
                   (!('media' in request.resource.data) || request.resource.data.media is list) &&
                   (!('tags' in request.resource.data) || (request.resource.data.tags is list && request.resource.data.tags.size() <= 10));
      
      allow update: if isOwner(resource.data.authorId) || isAdmin() &&
                   isValidString(request.resource.data.content, 1, 2000) &&
                   request.resource.data.authorId == resource.data.authorId &&
                   request.resource.data.createdAt == resource.data.createdAt &&
                   request.resource.data.keys().hasOnly(['content', 'tags', 'location']);
                   
      allow delete: if isOwner(resource.data.authorId) || isAdmin();

      // COMENTÁRIOS
      match /comments/{commentId} {
        function isPostOwner() {
          return get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid;
        }

        allow read: if isAuthenticated();
        allow list: if isAuthenticated();
        
        allow create: if isAuthenticated() &&
                     isOwner(request.resource.data.authorId) &&
                     isValidString(request.resource.data.content, 1, 1000) &&
                     request.resource.data.createdAt == request.time &&
                     request.resource.data.likes == 0 &&
                     request.resource.data.keys().hasAll(['authorId', 'content', 'createdAt', 'likes']) &&
                     request.resource.data.keys().hasOnly(['authorId', 'content', 'createdAt', 'likes', 'replyTo']);
                     
        allow update: if isOwner(resource.data.authorId) &&
                     isValidString(request.resource.data.content, 1, 1000) &&
                     request.resource.data.authorId == resource.data.authorId &&
                     request.resource.data.createdAt == resource.data.createdAt &&
                     request.resource.data.keys().hasOnly(['content']);
                     
        allow delete: if isOwner(resource.data.authorId) || isAdmin() || isPostOwner();
      }

      // LIKES
      match /likes/{userId} {
        allow read: if isAuthenticated();
        allow list: if isAuthenticated();
        allow create: if isOwner(userId) &&
                     request.resource.data.keys().hasAll(['createdAt']) &&
                     request.resource.data.createdAt == request.time &&
                     request.resource.data.keys().hasOnly(['createdAt']);
        allow delete: if isOwner(userId);
      }
    }

    // MARKETPLACE (Listagens)
    match /listagens/{listingId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      
      allow create: if isAuthenticated() &&
                   isOwner(request.resource.data.sellerId) &&
                   isValidString(request.resource.data.title, 5, 100) &&
                   isValidString(request.resource.data.description, 10, 2000) &&
                   request.resource.data.price is number &&
                   request.resource.data.price > 0 &&
                   request.resource.data.price <= 1000000 &&
                   request.resource.data.createdAt == request.time &&
                   request.resource.data.status == 'active' &&
                   request.resource.data.category in ['eletronicos', 'roupas', 'casa', 'veiculos', 'servicos', 'outros'] &&
                   request.resource.data.keys().hasAll(['sellerId', 'title', 'description', 'price', 'createdAt', 'status', 'category']) &&
                   request.resource.data.keys().hasOnly(['sellerId', 'title', 'description', 'price', 'createdAt', 'status', 'category', 'images', 'location', 'condition']);
                   
      allow update: if isOwner(resource.data.sellerId) &&
                   request.resource.data.sellerId == resource.data.sellerId &&
                   request.resource.data.createdAt == resource.data.createdAt &&
                   (!request.resource.data.keys().hasAny(['title']) || isValidString(request.resource.data.title, 5, 100)) &&
                   (!request.resource.data.keys().hasAny(['description']) || isValidString(request.resource.data.description, 10, 2000)) &&
                   (!request.resource.data.keys().hasAny(['price']) || (request.resource.data.price is number && request.resource.data.price > 0 && request.resource.data.price <= 1000000)) &&
                   (!request.resource.data.keys().hasAny(['status']) || request.resource.data.status in ['active', 'sold', 'inactive']) &&
                   request.resource.data.keys().hasOnly(['title', 'description', 'price', 'status', 'images', 'location', 'condition']);
                   
      allow delete: if isOwner(resource.data.sellerId) || isAdmin();
    }

    // SEGUIDORES/SEGUINDO
    match /users_public/{userId}/followers/{followerId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create: if isOwner(followerId) && request.resource.data.createdAt == request.time;
      allow delete: if isOwner(followerId) || isOwner(userId);
    }
    
    match /users_public/{userId}/following/{followingId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create: if isOwner(userId) && request.resource.data.createdAt == request.time;
      allow delete: if isOwner(userId);
    }

    // CONVERSAS PRIVADAS
    match /conversations/{conversationId} {
      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }
      
      allow read: if isAuthenticated() && isParticipant();
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow list: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if isAuthenticated() &&
                     isOwner(request.resource.data.senderId) &&
                     isValidString(request.resource.data.content, 1, 1000) &&
                     request.resource.data.createdAt == request.time;
      }
    }

    // REPORTES/DENÚNCIAS
    match /reports/{reportId} {
      allow create: if isAuthenticated() &&
                   isOwner(request.resource.data.reporterId) &&
                   request.resource.data.createdAt == request.time &&
                   request.resource.data.status == 'pending' &&
                   request.resource.data.type in ['spam', 'harassment', 'inappropriate', 'fake', 'other'];
      allow read: if isAdmin();
      allow list: if isAdmin();
      allow update: if isAdmin();
    }

    // ADMINISTRADORES
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow write: if false; // Apenas via Admin SDK
    }

    // ANALYTICS (apenas leitura para admins)
    match /analytics/{document} {
      allow read: if isAdmin();
      allow list: if isAdmin();
      allow write: if false; // Apenas via Cloud Functions
    }

    // COLEÇÃO DE SISTEMA - Para operações internas
    match /system/{document} {
      allow read: if isAdmin();
      allow write: if isSystemOperation();
    }
  }
}