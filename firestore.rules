// ARQUIVO CORRIGIDO E DEFINITIVO: firestore.rules
// CORRE√á√ÉO: Adicionadas regras para coment√°rios e subcole√ß√µes

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- FUN√á√ïES HELPER ---
    // ARQUITETURA: Fun√ß√µes reutiliz√°veis para manter as regras limpas (DRY principle).

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // MUDAN√áA: Nova fun√ß√£o de valida√ß√£o para o campo 'privacy'.
    // ARQUITETURA: Centraliza a l√≥gica de quais valores de privacidade s√£o permitidos.
    // Se no futuro adicionarmos 'followers-only', s√≥ precisamos mudar aqui.
    function isValidPrivacy(privacy) {
      return privacy in ['public', 'private'];
    }

    // Regra especial para ambiente de desenvolvimento com emuladores
    // IMPORTANTE: Remover ou comentar essa regra em produ√ß√£o
    match /{document=**} {
      allow read, write: if request.auth != null;
    }

    // --- REGRAS POR COLE√á√ÉO ---

    // üë§ Cole√ß√£o 'users' (DADOS PRIVADOS E SENS√çVEIS)
    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // üì¢ Cole√ß√£o 'users_public' (DADOS P√öBLICOS DE PERFIL)
    match /users_public/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) || isAdmin();
    }

    // üñºÔ∏è Subcole√ß√£o 'media' de um usu√°rio
    match /users/{userId}/media/{mediaId} {
      // Leitura continua a mesma: permitida se for p√∫blico, se for o dono ou admin.
      allow read: if resource.data.privacy == 'public' || isOwner(userId) || isAdmin();
      
      // Criar e deletar continua com a mesma permiss√£o.
      allow create, delete: if isOwner(userId) || isAdmin();

      // CORRE√á√ÉO: 'update' foi separado para ter sua pr√≥pria l√≥gica de valida√ß√£o.
      // ARQUITETURA: Agora verificamos n√£o apenas QUEM pode atualizar, mas O QUE pode ser atualizado.
      allow update: if (isOwner(userId) || isAdmin())
                    && isValidPrivacy(request.resource.data.privacy) // O novo valor de 'privacy' deve ser v√°lido.
                    && request.resource.data.ownerId == resource.data.ownerId // O 'ownerId' n√£o pode ser alterado.
                    && request.resource.data.createdAt == resource.data.createdAt; // A data de cria√ß√£o √© imut√°vel.
    }
    
    // ‚úçÔ∏è Cole√ß√£o 'posts'
    match /posts/{postId} {
      allow read: if true;
      allow create: if (request.auth != null && request.resource.data.authorId == request.auth.uid) || isAdmin();
      allow update, delete: if (request.auth != null && resource.data.authorId == request.auth.uid) || isAdmin();

      // üí¨ NOVA: Subcole√ß√£o 'comments' dentro de posts
      match /comments/{commentId} {
        allow read: if true; // Qualquer pessoa autenticada pode ler coment√°rios
        allow create: if isAuthenticated() 
                      && request.resource.data.authorId == request.auth.uid // S√≥ pode criar coment√°rio em seu pr√≥prio nome
                      && request.resource.data.keys().hasAll(['authorId', 'content', 'createdAt']); // Campos obrigat√≥rios
        allow update: if isAuthenticated() 
                      && (resource.data.authorId == request.auth.uid || isAdmin()) // S√≥ o autor ou admin pode editar
                      && request.resource.data.authorId == resource.data.authorId // authorId n√£o pode mudar
                      && request.resource.data.createdAt == resource.data.createdAt; // createdAt n√£o pode mudar
        allow delete: if isAuthenticated() 
                      && (resource.data.authorId == request.auth.uid || isAdmin()); // S√≥ o autor ou admin pode deletar
      }
    }

    // üí¨ NOVA: Cole√ß√£o global 'comments' (caso voc√™ use essa estrutura)
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() 
                    && request.resource.data.authorId == request.auth.uid
                    && request.resource.data.keys().hasAll(['authorId', 'content', 'postId', 'createdAt']);
      allow update: if isAuthenticated() 
                    && (resource.data.authorId == request.auth.uid || isAdmin())
                    && request.resource.data.authorId == resource.data.authorId
                    && request.resource.data.postId == resource.data.postId
                    && request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isAuthenticated() 
                    && (resource.data.authorId == request.auth.uid || isAdmin());
    }

    // üõí Cole√ß√£o 'marketplace' (para an√∫ncios)
    match /marketplace/{itemId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.sellerId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.sellerId == request.auth.uid;
    }

    // üë• NOVA: Cole√ß√£o 'admins' (para verifica√ß√£o de administradores)
    match /admins/{adminId} {
      allow read: if isAuthenticated(); // Qualquer usu√°rio autenticado pode verificar se algu√©m √© admin
      allow write: if false; // Apenas atrav√©s do Firebase Console ou Cloud Functions
    }

    // üìä NOVA: Cole√ß√£o 'analytics' (m√©tricas da aplica√ß√£o)
    match /analytics/{docId} {
      allow read: if isAdmin();
      allow write: if isAdmin() || isAuthenticated(); // Usu√°rios podem criar dados de analytics
    }

    // üîî NOVA: Cole√ß√£o 'notifications' (notifica√ß√µes dos usu√°rios)
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // üë• NOVA: Cole√ß√£o 'follows' (sistema de seguir usu√°rios)
    match /follows/{followId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.followerId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.followerId;
    }

    // üíï NOVA: Cole√ß√£o 'likes' (curtidas em posts)
    match /likes/{likeId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // üì± NOVA: Subcole√ß√£o 'likes' dentro de posts (estrutura alternativa)
    match /posts/{postId}/likes/{likeId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
  }
}